#!/usr/bin/env ruby

gem "highline"

require "highline/import"
require "pathname"
require "fileutils"
require "optparse"

require_relative "../lib/projectionist/projects"

include FileUtils
include Projectionist::Projects

CACHE_DIRECTORY   = File.join(ENV["HOME"], ".projection-projects").to_s
terminal_width, _ = HighLine::SystemExtensions.terminal_size
available_files   = Dir["#{CACHE_DIRECTORY}/*.projections.json"]
DOWNLOADED_FILES  = Hash[available_files.map do |filename|
  name = Pathname.new(filename).basename(".projections.json").to_s
  [name, filename]
end]

def colorize(string, *colors)
  colors = Array(colors)
  HighLine::String.new(string).color(*colors)
end

def setup_cache_directory
  unless File.exist? CACHE_DIRECTORY
    puts "create projection-projects cache directory (y/N)? #{CACHE_DIRECTORY}"
    mkdir_p CACHE_DIRECTORY if "y" == gets.strip.downcase
  end
end

def copy_projection(name, source, destination = "#{getwd}/.projections.json")
  unless source
    puts "#{colorize(name, :red)} projection was not found. Use `projection -l` to show available projection files."
    exit -1
  end

  cp source, destination
  puts "Projection #{colorize(name, :red)} was copied to the current directory."
end

if ARGV.count > 0
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: projection [options]"

    opts.on("-s", "--setup") do
      setup_cache_directory
      exit
    end

    opts.on("-p", "--path [name]", "Lists out the paths for the matching name") do |value|
      value ||= ""
      filtered = DOWNLOADED_FILES.select { |name| name.downcase.include? value.downcase }
      maximum  = filtered.keys.map(&:length).max
      filtered.each do |name, path|
        puts "#{colorize(name.ljust(maximum), :bold, :blue)} #{colorize("=>", :cyan)} #{colorize(path, :green)}"
      end
      exit
    end

    opts.on("-l", "--list", "List installed projection names") do |list|
      DOWNLOADED_FILES.each do |name, path|
        puts name
      end
      exit
    end

    opts.on("-c", "--fetch", "Fetch projections from remote") do |fetch|
      puts "The following projections are available:"
      results  = fetch_projections
      projects = results.map { |result| result[:project] }
      maximum  = results.map(&:length).max
      projects.each do |project|
        puts "#{colorize(project.ljust(maximum), :bold, :blue)}"
      end
      exit
    end

    opts.on_tail("-h", "--help") do
      puts opts
      exit
    end
  end

  parser.parse!
  copy_projection ARGV.first, DOWNLOADED_FILES[ARGV.first]
else
  choose do |menu|
    menu.prompt = "What type of project? "
    menu.choices(*DOWNLOADED_FILES.keys) { |name| copy_projection name, DOWNLOADED_FILES[name] }
  end
end
