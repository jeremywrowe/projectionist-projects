#!/usr/bin/env ruby

gem "highline"

require "highline/import"
require "pathname"
require "fileutils"
require "optparse"

include FileUtils

terminal_width, _  = HighLine::SystemExtensions.terminal_size
projections_path   = File.expand_path("../../projections", __FILE__)
available_files    = Dir["#{projections_path}/*.projections.json"]
@names_to_files    = Hash[available_files.map do |filename|
  name = Pathname.new(filename).basename(".projections.json").to_s
  [name, filename]
end]

def copy_projection(name, source, destination = "#{getwd}/.projections.json")
  colored_name = HighLine::String.new(name).color(:red)
  unless source
    puts "#{colored_name} projection was not found. Use `projection -l` to show available projection files."
    exit -1
  end

  cp source, destination
  puts "Projection #{colored_name} was copied to the current directory."
end

if ARGV.count > 0
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: projection [options]"

    opts.on("-p", "--path [name]", "Lists out the paths for the matching name") do |value|
      value ||= ""
      filtered = @names_to_files.select { |name| name.downcase.include? value.downcase }
      maximum  = filtered.keys.map(&:length).max
      filtered.each do |name, path|
        puts "#{HighLine::String.new(name.ljust(maximum)).color(:bold, :blue)} #{HighLine::String.new("=>").color(:cyan)} #{HighLine::String.new(path).color(:green)}"
      end
      exit
    end

    opts.on("-l", "--list", "List available projection names") do |list|
      @names_to_files.each do |name, path|
        puts name
      end
      exit
    end

    opts.on_tail("-h", "--help") do
      puts opts
      exit
    end
  end

  parser.parse!
  copy_projection ARGV.first, @names_to_files[ARGV.first]
else
  choose do |menu|
    menu.prompt = "What type of project? "
    menu.choices(*@names_to_files.keys) { |name| copy_projection name, @names_to_files[name] }
  end
end
